{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","components/MainPage.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","Header","nextProps","nextState","MainPage","filterRobots","searchField","filter","robot","toLowerCase","includes","onRequestRobots","onSearchChange","isPending","ErrorBoundry","App","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bf172c4d.chunk.js","sourcesContent":["import { apiCall } from \"./api/api\";\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  apiCall(\"https://jsonplaceholder.typicode.com/users\")\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const apiCall = link => fetch(link).then(response => response.json());\n","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{ overflow: \"scroll\", border: \"5px solid black\", height: \"800px\" }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriendz</h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nimport CardList from \"./CardList\";\nimport SearchBox from \"./SearchBox\";\nimport Scroll from \"./Scroll\";\nimport ErrorBoundry from \"./ErrorBoundry\";\nimport Header from \"./Header\";\n\nexport class MainPage extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = () => {\n    const { robots, searchField } = this.props;\n    return robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n  };\n\n  render() {\n    const { onSearchChange, isPending } = this.props;\n\n    return (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          {isPending ? (\n            <h1>Loading</h1>\n          ) : (\n            <ErrorBoundry>\n              <CardList robots={this.filterRobots()} />\n            </ErrorBoundry>\n          )}\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setSearchField, requestRobots } from \"../actions\";\n\nimport MainPage from \"../components/MainPage\";\n\nimport \"./App.css\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  render() {\n    return <MainPage {...this.props} />;\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: true\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport \"tachyons\";\n\nimport App from \"./containers/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { requestRobots, searchRobots } from \"./reducers\";\n\nimport \"./index.css\";\n\nconst logger = createLogger();\n\nconst rootReducers = combineReducers({ requestRobots, searchRobots });\n\nconst store = createStore(\n  rootReducers,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}